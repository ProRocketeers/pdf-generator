// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/generate": {
            "post": {
                "description": "Generate a PDF document from template based on the provided variables",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "PDF Generate"
                ],
                "summary": "Generate something",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Check if the service is running",
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy"
                    },
                    "500": {
                        "description": "Service is not healthy"
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get service metrics",
                "tags": [
                    "System"
                ],
                "summary": "Metrics",
                "responses": {
                    "200": {
                        "description": "Service metrics",
                        "schema": {
                            "$ref": "#/definitions/routes.MetricsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "routes.BySizeStat": {
            "type": "object",
            "properties": {
                "Frees": {
                    "type": "integer"
                },
                "Mallocs": {
                    "type": "integer"
                },
                "Size": {
                    "type": "integer"
                }
            }
        },
        "routes.GenerateRequest": {
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "template": {
                    "type": "string",
                    "example": "https://example.com/template.adoc"
                },
                "variables": {
                    "$ref": "#/definitions/routes.TemplateVariables"
                }
            }
        },
        "routes.Memstats": {
            "type": "object",
            "properties": {
                "Alloc": {
                    "type": "integer"
                },
                "BuckHashSys": {
                    "type": "integer"
                },
                "BySize": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.BySizeStat"
                    }
                },
                "DebugGC": {
                    "type": "boolean"
                },
                "EnableGC": {
                    "type": "boolean"
                },
                "Frees": {
                    "type": "integer"
                },
                "GCCPUFraction": {
                    "type": "number"
                },
                "GCSys": {
                    "type": "integer"
                },
                "HeapAlloc": {
                    "type": "integer"
                },
                "HeapIdle": {
                    "type": "integer"
                },
                "HeapInuse": {
                    "type": "integer"
                },
                "HeapObjects": {
                    "type": "integer"
                },
                "HeapReleased": {
                    "type": "integer"
                },
                "HeapSys": {
                    "type": "integer"
                },
                "LastGC": {
                    "type": "integer"
                },
                "Lookups": {
                    "type": "integer"
                },
                "MCacheInuse": {
                    "type": "integer"
                },
                "MCacheSys": {
                    "type": "integer"
                },
                "MSpanInuse": {
                    "type": "integer"
                },
                "MSpanSys": {
                    "type": "integer"
                },
                "Mallocs": {
                    "type": "integer"
                },
                "NextGC": {
                    "type": "integer"
                },
                "NumForcedGC": {
                    "type": "integer"
                },
                "NumGC": {
                    "type": "integer"
                },
                "OtherSys": {
                    "type": "integer"
                },
                "PauseEnd": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "PauseNs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "PauseTotalNs": {
                    "type": "integer"
                },
                "StackInuse": {
                    "type": "integer"
                },
                "StackSys": {
                    "type": "integer"
                },
                "Sys": {
                    "type": "integer"
                },
                "TotalAlloc": {
                    "type": "integer"
                }
            }
        },
        "routes.MetricsResponse": {
            "type": "object",
            "properties": {
                "cmdline": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "memstats": {
                    "$ref": "#/definitions/routes.Memstats"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "routes.TemplateVariables": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "100.00"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
